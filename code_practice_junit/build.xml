<project name="ArtOfUnitTesting" basedir="." default="main"
	       xmlns:artifact="antlib:org.apache.maven.artifact.ant"
	       xmlns:if="ant:if"
	       xmlns:unless="ant:unless">
	<!-- <mlr 131009: begin - sandbox for getting up to speed.> -->
	<description>
		Project Name: ${ant.project.name}
		Descriptions: An Ant project that builds stuff
		I wrote while studying the book
		The Art of Unit Testing.
	</description>

	<!-- <mlr 131117: begin - add capability to run Perl script that starts Openfire -->
	<!-- <mlr 131117: begin - add this for ant-contrib tasks> -->
	<taskdef resource="net/sf/antcontrib/antlib.xml"/>
	<!-- <mlr 131117: end - add this for ant-contrib tasks> -->
	<!-- <mlr 131117: end - add capability to run Perl script that starts Openfire -->

	<!-- set global properties for this build -->
	<property name="src1" location="src1"/>
	<property name="src2" value="src2"/>
	<property file="build.properties"/>

	<property name="web.dir" value="web_dir"/>
	<property name="appserver.lib" value="appserver_lib"/>

	<!-- Nice example at ...
	http://stackoverflow.com/questions/722774/getting-ant-javac-to-recognise-a-classpath
	-->
	<path id="master-classpathXXX">
		<!--
		<fileset dir="${web.dir}/WEB-INF/lib">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${appserver.lib}">
			<include name="servlet*.jar"/>
		</fileset>
		-->
		<pathelement location="${lib.dir}/jmockit.jar"/>
		<fileset dir="${lib.dir}">
			<include name="*.jar"/>
			<exclude name="jmockit.jar"/>
		</fileset>
		<pathelement path="${build.dir}"/>
	</path>

	<patternset id="app.sources">
		<include name="src/main/java/**/*.java"/>
	</patternset>

	<patternset id="unit.test.sources">
		<include name="src/test/java/**/*.java"/>
	</patternset>

	<target name="nop">
		<echo>This is the "No-op" target.</echo>
		<echo>&lt;property name="src1" location="src1"> = ${src1}</echo>
		<echo>&lt;property name="src2" value="src2"> = ${src2}</echo>
		<echo/>
		<echo>build.properties-base.path: ${base.path}</echo>
		<echo>build.properties-deploy.app: ${deploy.app}</echo>
		<echo>build.properties-deploy.path: ${deploy.path}</echo>
	</target>

	<target name="compileXXX">
		<mkdir dir="${build.dir}"/>
		<javac
			classpath="xyz.jar"
			compiler="javac1.7"
			debug="false"
			debuglevel="lines"
			destdir="${build.dir}"
			srcdir="src/main/java"
			includeantruntime="false">
			<classpath refid="master-classpathXXX"/>
			<exclude name="**/*_bad.java"/>
			<compilerarg value="-Xlint:unchecked" />
		</javac>
	</target>
	<!-- <mlr 131009: end - sandbox for getting up to speed.> -->

	<!-- <mlr 131020: begin - sandbox for learning macrodefs.> -->
	<macrodef name="testing">
		<attribute name="v" default="NOT SET"/>
		<element name="some-tasks" optional="yes"/>
		<sequential>
			<echo>v is @{v}</echo>
			<some-tasks/>
		</sequential>
	</macrodef>

	<target name="testing">
		<testing v="This is v">
			<some-tasks>
				<echo>this is a test</echo>
			</some-tasks>
		</testing>
	</target>
	<!-- <mlr 131020: end - sandbox for learning macrodefs.> -->



	
	
	
	
	
	
	
	
	
	

	<!-- 
	     ##################################################################
	     #                                                                #
	     #       Begin Production (non-sandbox) Build Configuration       #
	     #                                                                #
	     ##################################################################
	-->
	<!-- URL: http://ant.apache.org/manual/tutorial-HelloWorldWithAnt.html -->
	<!-- <mlr 131009: begin - Tutorial: Hello World with Apache Ant> -->
	<!-- PROPERTIES - set properties for the project -->
	<property name="src.dir" value="src/main/java"/>
	<property name="srcUT.dir" value="src/test/java"/>
	<property name="build.dir" value="target"/>
	<property name="classes.dir" value="${build.dir}/classes"/>
	<property name="classesUT.dir" value="${build.dir}/test-classes"/>
	<property name="config.dir" value="src/main/config"/>
	<property name="jar.dir" value="${build.dir}/jar"/>
	<property name="lib.dir" value="lib"/>
	<property name="report.dir"  value="${build.dir}/test-reports"/>
	<property name="reportUT.dir"  value="${report.dir}/junitreport"/>
	<property name="scriptsTest.dir" value="src/test/scripts"/>

	<property name="main-class" value="ADayInTheLife"/>
	<property name="app.jar" value="${jar.dir}/${ant.project.name}.jar"/>

	<!-- PATH - for use as classpath to find the jar files for the libraries we're using -->
	<path id="master-classpath">
		<fileset dir="${lib.dir}" includes="*.jar"/>
	</path>

	<!-- PATH - that abstracts our app.jar; for use with junit -->
	<path id="application" location="${app.jar}"/>

	<!-- PATTERNSET - that selects the app. derived objects. -->
	<patternset id="app.objs">
		<include name="${classes.dir}/**/*.class"/>
	</patternset>

	<!-- PATTERNSET - that selects the test derived objects. -->
	<patternset id="unit.test.objs">
		<include name="${classesUT.dir}/**/*.class"/>
	</patternset>

	<!-- 
	     ##################################################################
	     #                                                                #
	     #                         CLEAN TARGETS                          #
	     #                                                                #
	     ##################################################################
	-->
	<!-- TARGET - that cleans the production derived objects -->
	<target name="clean">
		<delete>
			<fileset dir=".">
				<patternset refid="app.objs"/>
			</fileset>
		</delete>
		<delete file="${app.jar}"/>
	</target>

	<!-- TARGET - that cleans the testing derived objects -->
	<target name="cleanUT">
		<delete>
			<fileset dir=".">
				<patternset refid="unit.test.objs"/>
			</fileset>
		</delete>
	</target>

	<!-- TARGET (CLI) - that one button cleans all the derived objects -->
	<target name="clean_all" depends="clean,cleanUT"
		description="Usage: ant clean_all (clean, cleanUT)"/>

	<!-- 
	     ##################################################################
	     #                                                                #
	     #                    APPLICATION TARGETS                         #
	     #                                                                #
	     ##################################################################
	-->
	<!-- TARGET - that compiles the production source files -->
	<target name="compile">
		<mkdir dir="${classes.dir}"/>
		<javac classpathref="master-classpath"
			srcdir="${src.dir}"
			destdir="${classes.dir}"
			includeantruntime="true">
			<compilerarg value="-Xlint:unchecked" />
		</javac>
		<copy todir="${classes.dir}">
			<fileset dir="${config.dir}" includes="*.properties"/>
		</copy>
	</target>

	<!-- TARGET - that packages the production derived objects -->
	<target name="jar">
		<mkdir dir="${jar.dir}"/>
		<jar destfile="${app.jar}"
			basedir="${classes.dir}">
			<manifest>
				<attribute name="Main-Class" value="${main-class}"/>
			</manifest>
		</jar>
	</target>

	<!-- TARGET - that executes the production application -->
	<target name="run">
		<java classname="${main-class}"
			fork="true">
			<arg value="-list_all"/>
			<classpath>
				<path refid="master-classpath"/>
				<path refid="application"/>
				<path location="${app.objs}"/>
			</classpath>
		</java>
	</target>

	<!-- TARGET (CLI) - that one button builds and runs the application -->
	<target name="main" depends="clean,compile,jar,run"
		description="Usage: ant (clean, compile, jar, run - using Mr. Happy events example)"/>

	<!-- 
	     ##################################################################
	     #                                                                #
	     #                 UNIT TEST TARGETS (comprehensive)              #
	     #                                                                #
	     ##################################################################
	-->
	<!-- PATTERNSET - that selects the unit tests -->
  <patternset id="unit.tests">
  	<include name="*Tests.java"                                      if="RunLearningCurveUnitTests"/>
  	<include name="auctionsniper/tests/unit/*Tests.java"             if="RunAuctionSniperUnitTests"/>
   	<include name="auctionsniper/tests/integration/*Tests.java"      if="RunAuctionSniperIntegrationTests"/>
   	<include name="auctionsniper/tests/acceptance/*Tests.java"       if="RunAuctionSniperAcceptanceTests"/>
	 	<exclude name="**/*_bad.java"/>
  	<exclude name="**/Reentrant*"/>
  	<exclude name="auctionsniper/tests/unit/FakeAuctionServerTests.java" if="RunAuctionSniperUnitTests"/>
  </patternset>
  
 	<!-- PROPERTY - set the property that determines unit tests to run (CLI overridable) -->
 <property name="UTSet" value="sniper"/>
  
	<!-- MACRODEF - that abstracts a task to determine a set of unit tests to execute -->
	<macrodef name="configureTestSet">
		<attribute name="mUTSet" default="sniper"/>
		<attribute name="mSubstring" default="sniper"/>
		<attribute name="mProperty" default="RunAuctionSniperUnitTests"/>
		<sequential>
			<if>
				<contains string="@{mUTSet}" substring="@{mSubstring}"/>
				<then>
					<property name="@{mProperty}" value="true"/>
				</then>
			</if>
		</sequential>
	</macrodef>

	<!-- MACRODEF - that abstracts a task to manage Openfire sever using a Perl script -->
	<!-- TODO: 131213 - rethink the decision making; decide how to provide messaging -->
	<macrodef name="runPerlScript">
		<attribute name="mEnableLock" default="AuctionSniperEndToEndTests"/>
		<attribute name="mEnableKey" default="EndToEndTests"/>
		<attribute name="mMessage" default="put_a_message_here"/>
		<attribute name="mScriptName" default="run-perl-openfirectl"/>
		<sequential>
			<if>
				<contains string="@{mEnableLock}" substring="@{mEnableKey}"/>
				<then>
					<antcall target="@{mScriptName}"/>
				</then>
			</if>
		</sequential>
	</macrodef>

	<!-- TARGET - that configures the unit tests to execute -->
	<target name="configure-unit-tests">
		<configureTestSet mUTSet="${UTSet}" mSubstring="sniper"           mProperty="RunAuctionSniperUnitTests"/>
		<configureTestSet mUTSet="${UTSet}" mSubstring="Int"              mProperty="RunAuctionSniperIntegrationTests"/>
		<configureTestSet mUTSet="${UTSet}" mSubstring="Acceptance"       mProperty="RunAuctionSniperAcceptanceTests"/>
		<configureTestSet mUTSet="${UTSet}" mSubstring="learningCurve"    mProperty="RunLearningCurveUnitTests"/>
		<if>
			<contains string="${UTSet}" substring="all"/>
			<then>
				<property name="RunAuctionSniperUnitTests" value="true"/>
				<property name="RunLearningCurveUnitTests" value="true"/>
			</then>
		</if>
		<echo>Running tests for: ${UTSet}</echo>
	</target>

	<!-- TARGET - that compiles the unit testing source files -->
	<target name="compileUT" depends="configure-unit-tests">
		<mkdir dir="${classesUT.dir}"/>
		<javac srcdir="${srcUT.dir}"
			destdir="${classesUT.dir}"
			includeantruntime="true">
			<classpath>
				<path refid="master-classpath"/>
				<path refid="application"/>
			</classpath>
			<patternset refid="unit.tests"/>
			<include name="auctionsniper/tests/AuctionSniperTestUtilities.java"/>
		</javac>
	</target>

	<!-- TARGET - that executes the unit testing suite -->
	<target name="junit">
		<delete dir="${reportUT.dir}"/>
		<mkdir dir="${reportUT.dir}"/>
		<mkdir dir="${reportUT.dir}/xml"/>
		<mkdir dir="${reportUT.dir}/html"/>

		<!-- Make sure the Openfire server is running when performing end-to-end acceptance tests -->
		<runPerlScript mEnableLock="${UTSet}" mEnableKey="Acceptance" mScriptName="run-perl-openfirectl" mMessage=""/>

		<junit printsummary="yes"
			haltonfailure="yes"
			showoutput="yes"
			tempdir="${reportUT.dir}">
			<!--<test name="${ant.project.name}"  todir="${reportUT.dir}" />-->
			<classpath>
				<path refid="master-classpath"/>
				<path location="${classes.dir}"/>
				<path location="${classesUT.dir}"/>
				<!--<path refid="application"/>-->
			</classpath>

			<formatter type="xml"/>

			<batchtest fork="yes" todir="${reportUT.dir}/xml">
				<fileset dir="${srcUT.dir}"
					excludes="FillInTheBlank* Template*">
					<exclude name="auctionsniper/tests/AuctionSniperTestUtilities.java"/>
			    <patternset refid="unit.tests"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!-- TARGET (CLI) - that one button builds and runs the unit tests -->
	<target name="junit_full_clean" depends="clean_all,compile,jar,compileUT,junit"
		description="Usage: ant junit_full_clean -DUTSet=sniperIntAcceptance (clean_all,compile,jar,compileUT,junit)"/>
		
	<!-- TARGET (CLI) - that one button builds, runs, and creates a report for the unit tests -->
	<target name="junitreport" depends="junit_full_clean,junitreport-generate"
		description="Usage: ant junitreport (junit_full_clean,junitreport-generate)"/>

	<!-- TARGET - that executes the unit testing suite -->
	<target name="junitreport-generate">
		<junitreport todir="${reportUT.dir}/xml">
			<fileset dir="${reportUT.dir}/xml" includes="TEST-*.xml"/>
			<report format="frames" styledir="${ant.home}/etc" todir="${reportUT.dir}/html"/>
		</junitreport>
		<echo>For your junitreport, see "index.html" in ${reportUT.dir}/html</echo>
	</target>
	<!-- <mlr 131009: end - Tutorial: Hello World with Apache Ant> -->

	<!-- 
	     ##################################################################
	     #                                                                #
	     #       SINGLE UNIT TEST TARGETS (use during developement)       #
	     #                                                                #
	     ##################################################################
	-->
	<!-- <mlr 131010: begin - add capability to run specific tests during development -->
	<!-- TARGET - that compiles a single unit testing source file -->
	<target name="compileRT">
		<mkdir dir="${classesUT.dir}"/>
		<javac srcdir="${srcUT.dir}"
			destdir="${classesUT.dir}"
			includeantruntime="true">
			<classpath>
				<path refid="master-classpath"/>
				<path refid="application"/>
				<path location="${classes.dir}"/>
			</classpath>
			<include name="**/${testClass}.java"/>
		</javac>
	</target>

	<!-- TARGET - that enforces a correct command line to run a single unit test -->
	<target name="ensure-test-name" unless="testClass">
		<fail message="You must run this target with -DtestClass=TestClassName"/>
	</target>

	<!-- TARGET (CLI) - that one button builds and runs a single unit test -->
	<target name="runtest"
		depends="ensure-test-name,compile,compileRT,runtest-do-it"
		description="Usage: ant runtest -DtestClass=AuctionSniperEndToEndTests"/>
		
	<!-- TARGET - that executes a single unit test -->
	<target name="runtest-do-it">

		<!-- Make sure the Openfire server is running when performing end-to-end acceptance tests -->
		<runPerlScript mEnableLock="${testClass}" mEnableKey="EndToEnd" mScriptName="run-perl-openfirectl" mMessage=""/>
			           
		<junit printsummary="withOutAndErr" fork="yes">
			<!--<sysproperty key="tests" value="${tests}"/>-->
			<classpath>
				<path refid="master-classpath"/>
				<path location="${classes.dir}"/>
				<path location="${classesUT.dir}"/>
				<!--<path refid="application"/>-->
			</classpath>
			<formatter type="plain" usefile="false"/>
			<batchtest>
				<fileset dir="${srcUT.dir}">
					<include name="**/${testClass}.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>
	<!-- <mlr 131010: end - add capability to run specific tests during development -->
	
	<!-- 
	     ##################################################################
	     #                                                                #
	     #                      SPECIAL PURPOSE TARGETS                   #
	     #                                                                #
	     ##################################################################
	-->
	<!-- <mlr 131117: begin - add capability to run Perl script that starts Openfire -->
	<!-- Usage: ant run-perl-openfirectl
	            ant run-perl-openfirectl -DperlVerbose=""
	            ant run-perl-openfirectl -Dcommand=kill;
	            ant run-perl-openfirectl -DperlDebug=args_kill
	            ant run-perl-openfirectl -DperlDebug=args_kill -Dcommand=kill
	-->
	<!-- PROPERTIES - set properties for the custome target -->
	<property name="command" value="start"/>
	<property name="perlDebug" value=""/>
	<property name="perlVerbose" value="-v"/>
	<!-- TARGET (CLI) - that one button runs a perl script for managing the Openfire server -->
	<target name="run-perl-openfirectl"
		description="Usage: ant run-perl-openfirectl -Dcommand=kill">

		<exec executable="perl" dir="${basedir}">
			<arg value="${scriptsTest.dir}/openfirectl.pl"/>
			<arg value="${perlVerbose}"/>
			<arg value="-d ${perlDebug}"/>
			<arg value="command=${command}"/>
		</exec>
	</target>
	<!-- <mlr 131117: end - add capability to run Perl script that starts Openfire -->
</project>